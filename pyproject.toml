[project]
name = "pfund-letta"
version = "0.0.1.dev1+letta0.6.53"
description = "Experimental fork of Letta for creating trading agents."
authors = [
    {name="Stephen Yau", email="softwareentrepreneer+pfund-letta@gmail.com"}
]
license = "Apache License"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "letta_client (>=0.1.114,<1.0.0); python_version < '4.0'",
    # server
    "websockets (>=15.0.1,<16.0.0)",
    "fastapi (>=0.115.12,<1.0.0)",
    "uvicorn (>=0.34.1,<1.0.0)",
    # SQL
    "pgvector (>=0.4.0,<1.0.0)",
    "pg8000 (>=1.30.3,<2.0.0)",
    "psycopg2-binary (>=2.9.10,<3.0.0)",
    "sqlalchemy (>=2.0.25,<3.0.0)",
    "sqlalchemy-json (>=0.7.0,<1.0.0)",
    "sqlalchemy-utils (>=0.41.2,<1.0.0)",
    "sqlmodel (>=0.0.16,<1.0.0)",
    "alembic (>=1.13.3,<2.0.0)",
    "marshmallow-sqlalchemy (>=1.4.1,<2.0.0)",
    # LLM
    "composio-core (>=0.7.7,<1.0.0); python_version < '4.0'",
    "llama-index (>=0.12.2,<1.0.0); python_version < '4.0'",
    "llama-index-embeddings-openai (>=0.3.1,<1.0.0); python_version < '4.0'",
    "anthropic (>=0.49.0,<1.0.0)",
    "openai (>=1.61.0,<2.0.0)",
    "google-genai (>=1.1.0,<2.0.0)",
    "mcp (>=1.6.0,<2.0.0)",
    # CLI
    "rich (>=13.9.4,<14.0.0)",
    "typer[all] (>=0.15.2,<1.0.0)",
    "docker (>=7.1.0,<8.0.0)",
    "questionary (>=2.0.1,<3.0.0)",
    "prettytable (>=3.9.0,<4.0.0)",
    "tqdm (>=4.66.1,<5.0.0)",
    "colorama (>=0.4.6,<1.0.0)",
    # NLP
    "docstring-parser (>=0.16,<0.17); python_version < '4.0'",
    "demjson3 (>=3.0.6,<4.0.0)",
    "html2text (>=2020.1.16,<2021.0.0)",
    "nltk (>=3.8.1,<4.0.0)",
    "pyhumps (>=3.8.0,<4.0.0)",
    # pydantic
    "pydantic (>=2.11.3,<3.0.0)",
    "pydantic-settings (>=2.2.1,<3.0.0)",
    "datamodel-code-generator[http] (>=0.25.0,<1.0.0)",
    # utils
    "apscheduler (>=3.11.0,<4.0.0)",
    "pytz (>=2023.3.post1,<2024.0.0)",
    "pyyaml (>=6.0.1,<7.0.0)",
    "python-box (>=7.1.1,<8.0.0)",
    "python-multipart (>=0.0.19,<1.0.0)",
    "jinja2 (>=3.1.5,<4.0.0)",
    "pathvalidate (>=3.2.1,<4.0.0)",
    "brotli (>=1.1.0,<2.0.0)",
    "grpcio (>=1.68.1,<2.0.0)",
    "grpcio-tools (>=1.68.1,<2.0.0)",
    # tracking
    "sentry-sdk[fastapi] (==2.19.1)",
    "opentelemetry-api (==1.30.0)",
    "opentelemetry-sdk (==1.30.0)",
    "opentelemetry-instrumentation-requests (==0.51b0)",
    "opentelemetry-exporter-otlp (==1.30.0)",
]

[project.optional-dependencies]
qdrant = ["qdrant-client (>=1.13.0,<2.0.0)"]

[tool.poetry]
packages = [
    {include = "letta", from = "."}
]

[tool.poetry.scripts]
letta = "letta.main:app"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pexpect = "^4.9.0"
black = {version = "^24.4.2", extras = ["jupyter"]}
pre-commit = {version = "^3.5.0", optional = true}
pyright = "^1.1.347"
pytest-order = "^1.0.1"
autoflake = "^2.2.0"
isort = "^5.12.0"
locust = "^2.21.0"
setuptools = "^70"
faker = {version = "^36.1.0"}
ipykernel = "^6.29.5"
ipdb = "^0.13.13"
pytest-mock = "^3.14.0"

[tool.black]
line-length = 140
target-version = ['py310', 'py311', 'py312', 'py313']
extend-exclude = "examples/*"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
line_length = 140
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

